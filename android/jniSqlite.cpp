/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_cocos2d_diguo_template_DDSqlite */


#include "SqliteHelper.hpp"

#ifdef __cplusplus
extern "C" {
#endif
    
    // char* jstringToChar(JNIEnv* env, jstring jstr) {
    //     char* rtn = NULL;
    //     jclass clsstring = env->FindClass("java/lang/String");
    //     jstring strencode = env->NewStringUTF("GB2312");
    //     jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
    //     jbyteArray barr = (jbyteArray) env->CallObjectMethod(jstr, mid, strencode);
    //     jsize alen = env->GetArrayLength(barr);
    //     jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
    //     if (alen > 0) {
    //         rtn = (char*) malloc(alen + 1);
    //         memcpy(rtn, ba, alen);
    //         rtn[alen] = 0;
    //     }
    //     env->ReleaseByteArrayElements(barr, ba, 0);
    //     return rtn;
    // }
    /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    openDB
     * Signature: (Ljava/lang/String;)Z
     */
    JNIEXPORT jboolean JNICALL Java_com_cocos2d_diguo_template_DDSqlite_openDB
    (JNIEnv *env, jclass cls, jstring path)
    {
        const char* utf_path = env->GetStringUTFChars(path, NULL);
        jboolean ret = SqliteHelper::getInstance()->openDB(utf_path);
        env->ReleaseStringUTFChars(path, utf_path);
        return ret;
    }

    /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    closeDB
     * Signature: ()V
     */
    JNIEXPORT void JNICALL Java_com_cocos2d_diguo_template_DDSqlite_closeDB
    (JNIEnv *env, jclass cls)
    {
        SqliteHelper::getInstance()->closeDB();
    }

    /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    executeSql
     * Signature: (Ljava/lang/String;)Z
     */
    JNIEXPORT jboolean JNICALL Java_com_cocos2d_diguo_template_DDSqlite_executeSql
    (JNIEnv *env, jclass cls, jstring sql)
    {
        const char* utf_sql = env->GetStringUTFChars(sql, NULL);
        jboolean ret = SqliteHelper::getInstance()->executeSql(utf_sql);
        env->ReleaseStringUTFChars(sql, utf_sql);
        return ret;
    }

    /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    prepareStatement
     * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
     */
    JNIEXPORT jboolean JNICALL Java_com_cocos2d_diguo_template_DDSqlite_prepareStatement
    (JNIEnv *env, jclass cls, jstring key, jstring prepare)
    {
        const char* utf_key = env->GetStringUTFChars(key, NULL);
        const char* utf_prepare = env->GetStringUTFChars(prepare, NULL);
        jboolean ret = SqliteHelper::getInstance()->prepareStatement(utf_key, utf_prepare);
        env->ReleaseStringUTFChars(key, utf_key);
        env->ReleaseStringUTFChars(prepare, utf_prepare);
        return ret;
    }

    /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    bindNull
     * Signature: (Ljava/lang/String;I)Z
     */
    JNIEXPORT jboolean JNICALL Java_com_cocos2d_diguo_template_DDSqlite_bindNull
    (JNIEnv *env, jclass cls, jstring key, jint index)
    {
        const char* utf_key = env->GetStringUTFChars(key, NULL);
        jboolean ret = SqliteHelper::getInstance()->bindNull(utf_key, index);
        env->ReleaseStringUTFChars(key, utf_key);
        return ret;
    }

    /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    bindInt
     * Signature: (Ljava/lang/String;II)Z
     */
    JNIEXPORT jboolean JNICALL Java_com_cocos2d_diguo_template_DDSqlite_bindInt
    (JNIEnv *env, jclass cls, jstring key, jint index, jint value)
    {
        const char* utf_key = env->GetStringUTFChars(key, NULL);
        jboolean ret = SqliteHelper::getInstance()->bindInt(utf_key, index, value);
        env->ReleaseStringUTFChars(key, utf_key);
        return ret;
    }

     /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    bindDouble
     * Signature: (Ljava/lang/String;ID)Z
     */
    JNIEXPORT jboolean JNICALL Java_com_cocos2d_diguo_template_DDSqlite_bindDouble
    (JNIEnv *env, jclass cls, jstring key, jint index, jdouble value)
    {
        const char* utf_key = env->GetStringUTFChars(key, NULL);
        jboolean ret = SqliteHelper::getInstance()->bindDouble(utf_key, index, value);
        env->ReleaseStringUTFChars(key, utf_key);
        return ret;
    }

     /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    bindText
     * Signature: (Ljava/lang/String;ILjava/lang/String;)Z
     */
    JNIEXPORT jboolean JNICALL Java_com_cocos2d_diguo_template_DDSqlite_bindText
    (JNIEnv *env, jclass cls, jstring key, jint index, jstring text)
    {
        const char* utf_key = env->GetStringUTFChars(key, NULL);
        const char* utf_text = env->GetStringUTFChars(text, NULL);
        jboolean ret = SqliteHelper::getInstance()->bindText(utf_key, index, utf_text);
        env->ReleaseStringUTFChars(key, utf_key);
        env->ReleaseStringUTFChars(text, utf_text);
        return ret;
    }

    /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    resetPrepare
     * Signature: (Ljava/lang/String;)Z
     */
    JNIEXPORT jboolean JNICALL Java_com_cocos2d_diguo_template_DDSqlite_resetPrepare
    (JNIEnv *env, jclass cls, jstring key)
    {
        const char* utf_key = env->GetStringUTFChars(key, NULL);
        jboolean ret = SqliteHelper::getInstance()->resetPrepare(utf_key);
        env->ReleaseStringUTFChars(key, utf_key);
        return ret;
    }

    /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    exePrepareOnce
     * Signature: (Ljava/lang/String;)Z
     */
    JNIEXPORT jboolean JNICALL Java_com_cocos2d_diguo_template_DDSqlite_exePrepareOnce
    (JNIEnv *env, jclass cls, jstring key)
    {
        const char* utf_key = env->GetStringUTFChars(key, NULL);
        jboolean ret = SqliteHelper::getInstance()->exePrepareOnce(utf_key);
        env->ReleaseStringUTFChars(key, utf_key);
        return ret;
    }

     /*
     * Class:     com_cocos2d_diguo_template_DDSqlite
     * Method:    exePrepareQuery
     * Signature: (Ljava/lang/String;)Ljava/lang/String;
     */
    JNIEXPORT jstring JNICALL Java_com_cocos2d_diguo_template_DDSqlite_exePrepareQuery
    (JNIEnv *env, jclass cls, jstring key)
    {
        const char* utf_key = env->GetStringUTFChars(key, NULL);
        std::string ret = SqliteHelper::getInstance()->exePrepareQuery(utf_key);
        env->ReleaseStringUTFChars(key, utf_key);
        return env->NewStringUTF(ret.c_str());
    }
    
#ifdef __cplusplus
}
#endif
